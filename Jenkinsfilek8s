    // Jenkinsfile v2.0.1
    pipeline {
        agent {
            kubernetes {
                defaultContainer 'arduino-gcc'
                yamlFile 'cloudprovider.yaml'
            }
        }

        options {
            timestamps()
            timeout(time: 30, unit: 'MINUTES')
        }

        environment {
            DEPLOY_TOOL_URL = 'https://bitbucket.microchip.com/scm/citd/tool-github-deploy.git'
            DEPLOY_SCRIPT_FILE = 'tool-github-deploy/tool-github-deploy/tool-github-deploy.py'
            BITBUCKET_REPO = 'https://bitbucket.microchip.com/scm/mcu8mass/avr-iot-cellular-arduino-library.git'
            GITHUB_REPO = 'https://github.com/microchip-pic-avr-solutions/avr-iot-cellular-arduino-library'
            GITHUB_REPO_SHORT = 'avr-iot-cellular-arduino-library'
            GITHUB_ORG = 'microchip-pic-avr-solutions'
            TARGET_BRANCH = 'main'
        }

        stages {
            stage('setup') {
                steps {
                    checkout scm
                    script {
                        env.GIT_TAG = gitTag()
                        env.GIT_COMMIT = getCommit()

                        if(env.GIT_TAG != '') {
                            currentBuild.displayName = "#${BUILD_NUMBER} | ${JOB_NAME} | RELEASE-CANDIDATE-${env.GIT_TAG}"
                            env.RELEASE_NAME = env.GIT_TAG
                        } else {
                            currentBuild.displayName = "#${BUILD_NUMBER} | ${JOB_NAME} | ${env.GIT_COMMIT}"
                            env.RELEASE_NAME = env.GIT_COMMIT
                        }
                    }
                }
            }


            stage('install-libraries') {
                steps {
                    sh 'wget http://drazzy.com/package_drazzy.com_index.json --no-check-certificate'
                    sh 'arduino-cli core update-index --additional-urls "file://$PWD/package_drazzy.com_index.json"'
                    sh 'arduino-cli core install --additional-urls "file://$PWD/package_drazzy.com_index.json" DxCore:megaavr'
                    sh 'arduino-cli lib update-index'
                    sh 'arduino-cli lib install ArduinoJson'
                    sh 'arduino-cli lib install "Adafruit GPS Library"'
                    sh 'arduino-cli lib install "Adafruit AHTX0"'
                    sh 'arduino-cli lib install "Adafruit seesaw Library"'
                    sh 'arduino-cli lib install "Adafruit VEML7700 Library"'
                    sh 'ARDUINO_LIBRARY_ENABLE_UNSAFE_INSTALL=true arduino-cli lib install --git-url https://bitbucket.microchip.com/scm/mcu8mass/veml3328_arduino_driver.git'
                    sh 'ARDUINO_LIBRARY_ENABLE_UNSAFE_INSTALL=true arduino-cli lib install --git-url https://bitbucket.microchip.com/scm/mcu8mass/mcp9808_arduino_driver.git'
                }
            }

            stage('linter') {
                steps {
                    sh 'arduino-lint --library-manager update --compliance permissive --project-type library'
                    script {
                        env.DEP_ERROR = getDependencyError()
                        if (env.DEP_ERROR != '') {
                            error("LP048 error: depends field item(s) not found")
                        }
                    }
                }
            }

            stage('build-examples') {
                steps {
                    sh 'chmod +x ./scripts/compile_examples.sh'
                    sh './scripts/compile_examples.sh'
                }
            }

            stage('bundle') {
                steps {
                    sh 'chmod +x ./scripts/bundle.sh'
                    sh './scripts/bundle.sh $RELEASE_NAME'
                }
            }

            stage('deploy'){
                // Only run if git tag exists and it's the master branch
                when {
                    allOf {
                        branch env.TARGET_BRANCH
                    }
                }

                // Multi-Stage Deploy
                stages {
                    // Clone the deploy tool
                    stage('GitHub-Setup') {
                        steps {
                            sh "git clone --branch 1.6.0 ${env.DEPLOY_TOOL_URL}"
                            sh "pip3 install PyGithub atlassian-python-api jsonschema packaging lxml"
                        }
                    }

                    // Sync the bitbucket repository with the github repository
                    stage('GitHub-Sync') {
                        steps {
                            script {
                                withCredentials([usernamePassword(credentialsId: 'pic_avr_github', usernameVariable: 'USER_NAME', passwordVariable:'PASS' )]) {
                                    sh "python3 ${env.DEPLOY_SCRIPT_FILE} -deploy=true -gpat=${PASS} -dgid=${USER_NAME} -dburl=${env.BITBUCKET_REPO} -dgurl=${env.GITHUB_REPO} -dbranch=${env.TARGET_BRANCH} -dm=True"
                                }
                            }
                        }
                    }

                    // Create a new release
                    stage('GitHub-Release') {
                        when {
                            expression {
                                env.GIT_TAG != ''
                            }
                        }
                        steps {
                            script {
                                withCredentials([usernamePassword(credentialsId: 'pic_avr_github', usernameVariable: 'USER_NAME', passwordVariable:'PASS' )]) {
                                    sh "python3 ${env.DEPLOY_SCRIPT_FILE} -rlo=true -gpat=${PASS} -dgid=${USER_NAME} -rpn=${GITHUB_REPO_SHORT} -rporg=${GITHUB_ORG} -rltt=\"${env.GIT_TAG}\" -rltv=\"${env.GIT_TAG}\" -rlua=\"avr-iot-cellular-${env.GIT_TAG}.zip,sandbox.hex\""
                                }
                            }
                        }
                    }
                }
            }
        }

        post {
            success {
                archiveArtifacts artifacts: '**/avr-iot-cellular-*.zip, **/sandbox.hex'
            }
        }
    }


    String getCommit() {
        return sh(script: 'git rev-parse HEAD', returnStdout: true)?.trim()
    }

    String gitTag(){
        return sh(script: "git tag --contains", returnStdout: true)?.trim()
    }

    def initializeGitForDeployment() {
        execute("git config --global user.email 'microchip@microchip.com'")
        execute("git config --global user.name 'Microchip Technology'")
    }

    String getDependencyError() {
        return sh(script: "! arduino-lint --library-manager update --compliance strict --format json | grep LP048", returnStdout: true)?.trim()
    }
